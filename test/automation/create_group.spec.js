var import_test = require("@playwright/test");
var import_new_user = require("./new_user");
var import_open = require("./open");
var import_send_message = require("./send_message");
const userADisplayName = "userA";
const userBDisplayName = "userB";
const userCDisplayName = "userC";
const testMessage = "Sending Test Message";
const testReply = "Sending Reply Test Message";
(0, import_test.test)("Create group", async () => {
  const [windowA, windowB, windowC] = await Promise.all([(0, import_open.openApp)("1"), (0, import_open.openApp)("2"), (0, import_open.openApp)("3")]);
  const userA = await (0, import_new_user.newUser)(windowA, userADisplayName);
  const userB = await (0, import_new_user.newUser)(windowB, userBDisplayName);
  const userC = await (0, import_new_user.newUser)(windowC, userCDisplayName);
  await (0, import_send_message.sendMessage)(windowA, userB.sessionid, testMessage);
  await (0, import_send_message.sendMessage)(windowB, userA.sessionid, testReply);
  await (0, import_send_message.sendMessage)(windowA, userC.sessionid, testMessage);
  await (0, import_send_message.sendMessage)(windowC, userA.sessionid, testReply);
  await windowA.click('"New Closed Group"');
  await windowA.fill(".session-id-editable", "Test Group");
  await windowA.click(userBDisplayName);
  await windowA.click(userCDisplayName);
  await windowA.click('"Done"');
  windowA.locator(`text=${userBDisplayName}, ${userCDisplayName} + 'You joined the group'`);
  await windowA.fill("[data-testid=message-input] * textarea", testMessage);
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vdHMvdGVzdC9hdXRvbWF0aW9uL2NyZWF0ZV9ncm91cC5zcGVjLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBfZWxlY3Ryb24sIHRlc3QgfSBmcm9tICdAcGxheXdyaWdodC90ZXN0JztcbmltcG9ydCB7IG5ld1VzZXIgfSBmcm9tICcuL25ld191c2VyJztcbmltcG9ydCB7IG9wZW5BcHAgfSBmcm9tICcuL29wZW4nO1xuaW1wb3J0IHsgc2VuZE1lc3NhZ2UgfSBmcm9tICcuL3NlbmRfbWVzc2FnZSc7XG5cbmNvbnN0IHVzZXJBRGlzcGxheU5hbWUgPSAndXNlckEnO1xuY29uc3QgdXNlckJEaXNwbGF5TmFtZSA9ICd1c2VyQic7XG5jb25zdCB1c2VyQ0Rpc3BsYXlOYW1lID0gJ3VzZXJDJztcblxuY29uc3QgdGVzdE1lc3NhZ2UgPSAnU2VuZGluZyBUZXN0IE1lc3NhZ2UnO1xuY29uc3QgdGVzdFJlcGx5ID0gJ1NlbmRpbmcgUmVwbHkgVGVzdCBNZXNzYWdlJztcblxudGVzdCgnQ3JlYXRlIGdyb3VwJywgYXN5bmMgKCkgPT4ge1xuICAvLyBPcGVuIEVsZWN0cm9uXG4gIGNvbnN0IFt3aW5kb3dBLCB3aW5kb3dCLCB3aW5kb3dDXSA9IGF3YWl0IFByb21pc2UuYWxsKFtvcGVuQXBwKCcxJyksIG9wZW5BcHAoJzInKSwgb3BlbkFwcCgnMycpXSk7XG4gIC8vIENyZWF0ZSBVc2VyIHgzXG4gIC8vIGNyZWF0ZSB1c2VyQVxuICBjb25zdCB1c2VyQSA9IGF3YWl0IG5ld1VzZXIod2luZG93QSwgdXNlckFEaXNwbGF5TmFtZSk7XG4gIC8vIGNyZWF0ZSB1c2VyQlxuICBjb25zdCB1c2VyQiA9IGF3YWl0IG5ld1VzZXIod2luZG93QiwgdXNlckJEaXNwbGF5TmFtZSk7XG4gIC8vIENyZWF0ZSBVc2VyQ1xuICBjb25zdCB1c2VyQyA9IGF3YWl0IG5ld1VzZXIod2luZG93QywgdXNlckNEaXNwbGF5TmFtZSk7XG4gIC8vIEFkZCBjb250YWN0XG4gIGF3YWl0IHNlbmRNZXNzYWdlKHdpbmRvd0EsIHVzZXJCLnNlc3Npb25pZCwgdGVzdE1lc3NhZ2UpO1xuICBhd2FpdCBzZW5kTWVzc2FnZSh3aW5kb3dCLCB1c2VyQS5zZXNzaW9uaWQsIHRlc3RSZXBseSk7XG4gIGF3YWl0IHNlbmRNZXNzYWdlKHdpbmRvd0EsIHVzZXJDLnNlc3Npb25pZCwgdGVzdE1lc3NhZ2UpO1xuICBhd2FpdCBzZW5kTWVzc2FnZSh3aW5kb3dDLCB1c2VyQS5zZXNzaW9uaWQsIHRlc3RSZXBseSk7XG4gIC8vIENyZWF0ZSBncm91cCB3aXRoIGV4aXN0aW5nIGNvbnRhY3QgYW5kIHNlc3Npb24gSUQgKG9mIG5vbi1jb250YWN0KVxuICAvLyBDbGljayBuZXcgY2xvc2VkIGdyb3VwIHRhYlxuICBhd2FpdCB3aW5kb3dBLmNsaWNrKCdcIk5ldyBDbG9zZWQgR3JvdXBcIicpO1xuICAvLyBFbnRlciBncm91cCBuYW1lXG4gIGF3YWl0IHdpbmRvd0EuZmlsbCgnLnNlc3Npb24taWQtZWRpdGFibGUnLCAnVGVzdCBHcm91cCcpO1xuICAvLyBTZWxlY3QgdXNlciBCXG4gIGF3YWl0IHdpbmRvd0EuY2xpY2sodXNlckJEaXNwbGF5TmFtZSk7XG4gIC8vIFNlbGVjdCB1c2VyIENcbiAgYXdhaXQgd2luZG93QS5jbGljayh1c2VyQ0Rpc3BsYXlOYW1lKTtcbiAgLy8gQ2xpY2sgRG9uZVxuICBhd2FpdCB3aW5kb3dBLmNsaWNrKCdcIkRvbmVcIicpO1xuICAvLyBDaGVjayBncm91cCB3YXMgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcbiAgd2luZG93QS5sb2NhdG9yKGB0ZXh0PSR7dXNlckJEaXNwbGF5TmFtZX0sICR7dXNlckNEaXNwbGF5TmFtZX0gKyAnWW91IGpvaW5lZCB0aGUgZ3JvdXAnYCk7XG4gIC8vIFNlbmQgbWVzc2FnZSBpbiBncm91cCBjaGF0IGZyb20gdXNlciBhXG4gIGF3YWl0IHdpbmRvd0EuZmlsbCgnW2RhdGEtdGVzdGlkPW1lc3NhZ2UtaW5wdXRdICogdGV4dGFyZWEnLCB0ZXN0TWVzc2FnZSk7XG4gIC8vIFZlcmlmeSBpdCB3YXMgcmVjZWl2ZWQgYnkgb3RoZXIgdHdvIGFjY291bnRzXG4gIC8vIFNlbmQgbWVzc2FnZSBmcm9tIHVzZXIgMlxuICAvLyBWZXJpZnlcbiAgLy8gU2VuZCBtZXNzYWdlIGZyb20gdXNlciAzXG4gIC8vIFZlcmlmeVxufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxrQkFBZ0M7QUFDaEMsc0JBQXdCO0FBQ3hCLGtCQUF3QjtBQUN4QiwwQkFBNEI7QUFFNUIsTUFBTSxtQkFBbUI7QUFDekIsTUFBTSxtQkFBbUI7QUFDekIsTUFBTSxtQkFBbUI7QUFFekIsTUFBTSxjQUFjO0FBQ3BCLE1BQU0sWUFBWTtBQUVsQixzQkFBSyxnQkFBZ0IsWUFBWTtBQUUvQixRQUFNLENBQUMsU0FBUyxTQUFTLFdBQVcsTUFBTSxRQUFRLElBQUksQ0FBQyx5QkFBUSxHQUFHLEdBQUcseUJBQVEsR0FBRyxHQUFHLHlCQUFRLEdBQUcsQ0FBQyxDQUFDO0FBR2hHLFFBQU0sUUFBUSxNQUFNLDZCQUFRLFNBQVMsZ0JBQWdCO0FBRXJELFFBQU0sUUFBUSxNQUFNLDZCQUFRLFNBQVMsZ0JBQWdCO0FBRXJELFFBQU0sUUFBUSxNQUFNLDZCQUFRLFNBQVMsZ0JBQWdCO0FBRXJELFFBQU0scUNBQVksU0FBUyxNQUFNLFdBQVcsV0FBVztBQUN2RCxRQUFNLHFDQUFZLFNBQVMsTUFBTSxXQUFXLFNBQVM7QUFDckQsUUFBTSxxQ0FBWSxTQUFTLE1BQU0sV0FBVyxXQUFXO0FBQ3ZELFFBQU0scUNBQVksU0FBUyxNQUFNLFdBQVcsU0FBUztBQUdyRCxRQUFNLFFBQVEsTUFBTSxvQkFBb0I7QUFFeEMsUUFBTSxRQUFRLEtBQUssd0JBQXdCLFlBQVk7QUFFdkQsUUFBTSxRQUFRLE1BQU0sZ0JBQWdCO0FBRXBDLFFBQU0sUUFBUSxNQUFNLGdCQUFnQjtBQUVwQyxRQUFNLFFBQVEsTUFBTSxRQUFRO0FBRTVCLFVBQVEsUUFBUSxRQUFRLHFCQUFxQiwyQ0FBMkM7QUFFeEYsUUFBTSxRQUFRLEtBQUssMENBQTBDLFdBQVc7QUFNMUUsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
