var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = __toESM(require("chai"));
var sinon = __toESM(require("sinon"));
var import_mocha = require("mocha");
var import_test_utils = require("../../../test-utils");
var import_snode_api = require("../../../../session/apis/snode_api");
var Data = __toESM(require("../../../../data/data"));
var import_chai_as_promised = __toESM(require("chai-as-promised"));
var OnionPaths = __toESM(require("../../../../session/onions/onionPath"));
var import_utils = require("../../../test-utils/utils");
var import_seed_node_api = require("../../../../session/apis/seed_node_api");
import_chai.default.use(import_chai_as_promised.default);
import_chai.default.should();
const { expect } = import_chai.default;
const guard1ed = "e3ec6fcc79e64c2af6a48a9865d4bf4b739ec7708d75f35acc3d478f9161534e";
const guard2ed = "e3ec6fcc79e64c2af6a48a9865d4bf4b739ec7708d75f35acc3d478f91615349";
const guard3ed = "e3ec6fcc79e64c2af6a48a9865d4bf4b739ec7708d75f35acc3d478f9161534a";
const fakeSnodePool = [
  ...(0, import_utils.generateFakeSnodes)(12),
  (0, import_utils.generateFakeSnodeWithEdKey)(guard1ed),
  (0, import_utils.generateFakeSnodeWithEdKey)(guard2ed),
  (0, import_utils.generateFakeSnodeWithEdKey)(guard3ed),
  ...(0, import_utils.generateFakeSnodes)(3)
];
(0, import_mocha.describe)("GuardNodes", () => {
  const sandbox = sinon.createSandbox();
  let getSnodePoolFromDBOrFetchFromSeed;
  let fetchFromSeedWithRetriesAndWriteToDb;
  (0, import_mocha.describe)("selectGuardNodes", () => {
    beforeEach(() => {
      OnionPaths.clearTestOnionPath();
      import_test_utils.TestUtils.stubWindowLog();
      import_test_utils.TestUtils.stubWindow("getGlobalOnlineStatus", () => true);
      import_snode_api.Onions.resetSnodeFailureCount();
      OnionPaths.resetPathFailureCount();
      import_snode_api.SnodePool.TEST_resetState();
    });
    afterEach(() => {
      import_test_utils.TestUtils.restoreStubs();
      sandbox.restore();
    });
    it("does not fetch from seed if we got 12 or more snodes in the db", async () => {
      sandbox.stub(Data, "getSnodePoolFromDb").resolves(fakeSnodePool);
      getSnodePoolFromDBOrFetchFromSeed = sandbox.stub(import_snode_api.SnodePool, "getSnodePoolFromDBOrFetchFromSeed").callThrough();
      fetchFromSeedWithRetriesAndWriteToDb = sandbox.stub(import_snode_api.SnodePool, "TEST_fetchFromSeedWithRetriesAndWriteToDb").resolves();
      const testGuardNode = sandbox.stub(OnionPaths, "TEST_testGuardNode").resolves(true);
      sandbox.stub(Data, "updateGuardNodes").resolves();
      const fetchedGuardNodes = await OnionPaths.selectGuardNodes();
      expect(getSnodePoolFromDBOrFetchFromSeed.callCount, "getSnodePoolFromDBOrFetchFromSeed should have been called").to.be.eq(1);
      expect(fetchFromSeedWithRetriesAndWriteToDb.callCount, "fetchFromSeedWithRetriesAndWriteToDb should not have been called").to.be.eq(0);
      expect(testGuardNode.callCount, "firstGuardNode should have been called three times").to.be.eq(3);
      const firstGuardNode = testGuardNode.firstCall.args[0];
      const secondGuardNode = testGuardNode.secondCall.args[0];
      const thirdGuardNode = testGuardNode.thirdCall.args[0];
      expect(fetchedGuardNodes).to.deep.equal([firstGuardNode, secondGuardNode, thirdGuardNode]);
    });
    it("throws an error if we got enough snodes in the db but none test passes", async () => {
      sandbox.stub(Data, "getSnodePoolFromDb").resolves(fakeSnodePool);
      getSnodePoolFromDBOrFetchFromSeed = sandbox.stub(import_snode_api.SnodePool, "getSnodePoolFromDBOrFetchFromSeed").callThrough();
      fetchFromSeedWithRetriesAndWriteToDb = sandbox.stub(import_snode_api.SnodePool, "TEST_fetchFromSeedWithRetriesAndWriteToDb").resolves();
      const testGuardNode = sandbox.stub(OnionPaths, "TEST_testGuardNode").resolves(false);
      sandbox.stub(Data, "updateGuardNodes").resolves();
      let throwedError;
      try {
        await OnionPaths.selectGuardNodes();
      } catch (e) {
        throwedError = e.message;
      }
      expect(getSnodePoolFromDBOrFetchFromSeed.callCount, "getSnodePoolFromDBOrFetchFromSeed should have been called").to.be.eq(1);
      expect(fetchFromSeedWithRetriesAndWriteToDb.callCount, "fetchFromSeedWithRetriesAndWriteToDb should not have been called").to.be.eq(0);
      expect(testGuardNode.callCount, "firstGuardNode should have been called three times").to.be.eq(18);
      expect(throwedError).to.be.equal("selectGuardNodes stopping after attempts: 6");
    });
    it("throws an error if we have to fetch from seed, fetch from seed enough snode but we still fail", async () => {
      const invalidSndodePool = fakeSnodePool.slice(0, 11);
      sandbox.stub(Data, "getSnodePoolFromDb").resolves(invalidSndodePool);
      import_test_utils.TestUtils.stubWindow("getSeedNodeList", () => [{ url: "whatever" }]);
      getSnodePoolFromDBOrFetchFromSeed = sandbox.stub(import_snode_api.SnodePool, "getSnodePoolFromDBOrFetchFromSeed").callThrough();
      fetchFromSeedWithRetriesAndWriteToDb = sandbox.stub(import_seed_node_api.SeedNodeAPI, "fetchSnodePoolFromSeedNodeWithRetries").resolves(fakeSnodePool);
      sandbox.stub(Data, "updateGuardNodes").resolves();
      let throwedError;
      try {
        await OnionPaths.selectGuardNodes();
      } catch (e) {
        throwedError = e.message;
      }
      expect(throwedError).to.be.equal("selectGuardNodes stopping after attempts: 6");
    });
    it("returns valid guardnode if we have to fetch from seed, fetch from seed enough snodes but guard node tests passes", async () => {
      const invalidSndodePool = fakeSnodePool.slice(0, 11);
      sandbox.stub(Data, "getSnodePoolFromDb").resolves(invalidSndodePool);
      import_test_utils.TestUtils.stubWindow("getSeedNodeList", () => [{ url: "whatever" }]);
      const testGuardNode = sandbox.stub(OnionPaths, "TEST_testGuardNode").resolves(true);
      getSnodePoolFromDBOrFetchFromSeed = sandbox.stub(import_snode_api.SnodePool, "getSnodePoolFromDBOrFetchFromSeed").callThrough();
      fetchFromSeedWithRetriesAndWriteToDb = sandbox.stub(import_seed_node_api.SeedNodeAPI, "fetchSnodePoolFromSeedNodeWithRetries").resolves(fakeSnodePool);
      sandbox.stub(Data, "updateGuardNodes").resolves();
      const guardNodes = await OnionPaths.selectGuardNodes();
      expect(guardNodes.length).to.be.equal(3);
      expect(testGuardNode.callCount).to.be.equal(3);
    });
    it("throws if we have to fetch from seed, fetch from seed but not have enough fetched snodes", async () => {
      const invalidSndodePool = fakeSnodePool.slice(0, 11);
      sandbox.stub(Data, "getSnodePoolFromDb").resolves(invalidSndodePool);
      import_test_utils.TestUtils.stubWindow("getSeedNodeList", () => [{ url: "whatever" }]);
      getSnodePoolFromDBOrFetchFromSeed = sandbox.stub(import_snode_api.SnodePool, "getSnodePoolFromDBOrFetchFromSeed").callThrough();
      fetchFromSeedWithRetriesAndWriteToDb = sandbox.stub(import_seed_node_api.SeedNodeAPI, "fetchSnodePoolFromSeedNodeWithRetries").resolves(invalidSndodePool);
      sandbox.stub(Data, "updateGuardNodes").resolves();
      let throwedError;
      try {
        await OnionPaths.selectGuardNodes();
      } catch (e) {
        throwedError = e.message;
      }
      expect(throwedError).to.be.equal("Could not select guard nodes. Not enough nodes in the pool: 11");
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
