var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = __toESM(require("chai"));
var crypto = __toESM(require("crypto"));
var sinon = __toESM(require("sinon"));
var import_crypto = require("../../../../session/crypto");
var import_EncryptionType = require("../../../../session/types/EncryptionType");
var import_test_utils = require("../../../test-utils");
var import_protobuf = require("../../../../protobuf");
var import_utils = require("../../../../session/utils");
var import_chai_bytes = __toESM(require("chai-bytes"));
var import_types = require("../../../../session/types");
var import_String = require("../../../../session/utils/String");
var import_BufferPadding = require("../../../../session/crypto/BufferPadding");
import_chai.default.use(import_chai_bytes.default);
describe("MessageEncrypter", () => {
  const sandbox = sinon.createSandbox();
  const ourNumber = "0123456789abcdef";
  const ourUserEd25516Keypair = {
    pubKey: "37e1631b002de498caf7c5c1712718bde7f257c6dadeed0c21abf5e939e6c309",
    privKey: "be1d11154ff9b6de77873f0b6b0bcc460000000000000000000000000000000037e1631b002de498caf7c5c1712718bde7f257c6dadeed0c21abf5e939e6c309"
  };
  const ourIdentityKeypair = {
    pubKey: new Uint8Array([
      5,
      44,
      2,
      168,
      162,
      203,
      50,
      66,
      136,
      81,
      30,
      221,
      57,
      245,
      1,
      148,
      162,
      194,
      255,
      47,
      134,
      104,
      180,
      207,
      188,
      18,
      71,
      62,
      58,
      107,
      23,
      92,
      97
    ]),
    privKey: new Uint8Array([
      200,
      45,
      226,
      75,
      253,
      235,
      213,
      108,
      187,
      188,
      217,
      9,
      51,
      105,
      65,
      15,
      97,
      36,
      233,
      33,
      21,
      31,
      7,
      90,
      145,
      30,
      52,
      254,
      47,
      162,
      192,
      105
    ])
  };
  beforeEach(() => {
    sandbox.stub(import_utils.UserUtils, "getOurPubKeyStrFromCache").returns(ourNumber);
    sandbox.stub(import_utils.UserUtils, "getUserED25519KeyPair").resolves(ourUserEd25516Keypair);
  });
  afterEach(() => {
    sandbox.restore();
    import_test_utils.TestUtils.restoreStubs();
  });
  describe("EncryptionType", () => {
    describe("ClosedGroup", () => {
      it("should return a CLOSED_GROUP_MESSAGE envelope type for ClosedGroup", async () => {
        const hexKeyPair = {
          publicHex: `05${ourUserEd25516Keypair.pubKey}`,
          privateHex: "0123456789abcdef"
        };
        import_test_utils.TestUtils.stubData("getLatestClosedGroupEncryptionKeyPair").resolves(hexKeyPair);
        const data = crypto.randomBytes(10);
        const result = await import_crypto.MessageEncrypter.encrypt(import_test_utils.TestUtils.generateFakePubKey(), data, import_EncryptionType.EncryptionType.ClosedGroup);
        import_chai.default.expect(result.envelopeType).to.deep.equal(import_protobuf.SignalService.Envelope.Type.CLOSED_GROUP_MESSAGE);
      });
      it("should return a SESSION_MESSAGE envelope type for Fallback", async () => {
        const data = crypto.randomBytes(10);
        const result = await import_crypto.MessageEncrypter.encrypt(import_test_utils.TestUtils.generateFakePubKey(), data, import_EncryptionType.EncryptionType.Fallback);
        import_chai.default.expect(result.envelopeType).to.deep.equal(import_protobuf.SignalService.Envelope.Type.SESSION_MESSAGE);
      });
      it("should throw an error for anything else than Fallback or ClosedGroup", () => {
        const data = crypto.randomBytes(10);
        return import_crypto.MessageEncrypter.encrypt(import_test_utils.TestUtils.generateFakePubKey(), data, import_EncryptionType.EncryptionType.Signal).should.eventually.be.rejectedWith(Error);
      });
    });
  });
  describe("Session Protocol", () => {
    let sandboxSessionProtocol;
    beforeEach(() => {
      sandboxSessionProtocol = sinon.createSandbox();
      sandboxSessionProtocol.stub(import_utils.UserUtils, "getIdentityKeyPair").resolves(ourIdentityKeypair);
    });
    afterEach(() => {
      sandboxSessionProtocol.restore();
    });
    it("should pass the padded message body to encrypt", async () => {
      const data = crypto.randomBytes(10);
      const spy = sinon.spy(import_crypto.MessageEncrypter, "encryptUsingSessionProtocol");
      await import_crypto.MessageEncrypter.encrypt(import_test_utils.TestUtils.generateFakePubKey(), data, import_EncryptionType.EncryptionType.Fallback);
      import_chai.default.expect(spy.callCount).to.be.equal(1);
      const paddedData = (0, import_BufferPadding.addMessagePadding)(data);
      const firstArgument = new Uint8Array(spy.args[0][1]);
      import_chai.default.expect(firstArgument).to.deep.equal(paddedData);
      spy.restore();
    });
    it("should pass the correct data for sodium crypto_sign", async () => {
      const keypair = await import_utils.UserUtils.getUserED25519KeyPair();
      const recipient = import_test_utils.TestUtils.generateFakePubKey();
      const sodium = await (0, import_crypto.getSodium)();
      const cryptoSignDetachedSpy = sandboxSessionProtocol.spy(sodium, "crypto_sign_detached");
      const plainText = "123456";
      const plainTextBytes = new Uint8Array(import_utils.StringUtils.encode(plainText, "utf8"));
      const userED25519PubKeyBytes = new Uint8Array(import_utils.StringUtils.fromHex(keypair.pubKey));
      const recipientX25519PublicKeyWithoutPrefix = import_types.PubKey.remove05PrefixIfNeeded(recipient.key);
      const recipientX25519PublicKey = new Uint8Array(import_utils.StringUtils.fromHex(recipientX25519PublicKeyWithoutPrefix));
      await import_crypto.MessageEncrypter.encryptUsingSessionProtocol(recipient, plainTextBytes);
      const [dataForSign, userED25519SecretKeyBytes] = cryptoSignDetachedSpy.args[0];
      const userEdPrivkeyBytes = new Uint8Array(import_utils.StringUtils.fromHex(keypair.privKey));
      (0, import_chai.expect)(userED25519SecretKeyBytes).to.equalBytes(userEdPrivkeyBytes);
      (0, import_chai.expect)(dataForSign.subarray(0, plainTextBytes.length)).to.equalBytes(plainTextBytes);
      (0, import_chai.expect)(dataForSign.subarray(plainTextBytes.length, plainTextBytes.length + userED25519PubKeyBytes.length)).to.equalBytes(userED25519PubKeyBytes);
      (0, import_chai.expect)(dataForSign.subarray(plainTextBytes.length + userED25519PubKeyBytes.length)).to.equalBytes(recipientX25519PublicKey);
    });
    it("should return valid decodable ciphertext", async () => {
      const userX25519KeyPair = await import_utils.UserUtils.getIdentityKeyPair();
      const userEd25519KeyPair = await import_utils.UserUtils.getUserED25519KeyPair();
      const plainTextBytes = new Uint8Array(import_utils.StringUtils.encode("123456789", "utf8"));
      const sodium = await (0, import_crypto.getSodium)();
      const recipientX25519PrivateKey = userX25519KeyPair.privKey;
      const recipientX25519PublicKeyHex = (0, import_String.toHex)(userX25519KeyPair.pubKey);
      const recipientX25519PublicKeyWithoutPrefix = import_types.PubKey.remove05PrefixIfNeeded(recipientX25519PublicKeyHex);
      const recipientX25519PublicKey = new import_types.PubKey(recipientX25519PublicKeyWithoutPrefix);
      const ciphertext = await import_crypto.MessageEncrypter.encryptUsingSessionProtocol(recipientX25519PublicKey, plainTextBytes);
      const plaintextWithMetadata = sodium.crypto_box_seal_open(ciphertext, new Uint8Array((0, import_String.fromHex)(recipientX25519PublicKey.key)), new Uint8Array(recipientX25519PrivateKey));
      const signatureSize = sodium.crypto_sign_BYTES;
      const ed25519PublicKeySize = sodium.crypto_sign_PUBLICKEYBYTES;
      const signatureStart = plaintextWithMetadata.byteLength - signatureSize;
      const signature = plaintextWithMetadata.subarray(signatureStart);
      const pubkeyStart = plaintextWithMetadata.byteLength - (signatureSize + ed25519PublicKeySize);
      const pubkeyEnd = plaintextWithMetadata.byteLength - signatureSize;
      const senderED25519PublicKey = plaintextWithMetadata.subarray(pubkeyStart, pubkeyEnd);
      const plainTextEnd = plaintextWithMetadata.byteLength - (signatureSize + ed25519PublicKeySize);
      const plaintextDecoded = plaintextWithMetadata.subarray(0, plainTextEnd);
      (0, import_chai.expect)(plaintextDecoded).to.equalBytes(plainTextBytes);
      (0, import_chai.expect)(senderED25519PublicKey).to.equalBytes(userEd25519KeyPair.pubKey);
      const dataForVerify = (0, import_crypto.concatUInt8Array)(plaintextDecoded, senderED25519PublicKey, new Uint8Array((0, import_String.fromHex)(recipientX25519PublicKey.key)));
      const isValid = sodium.crypto_sign_verify_detached(signature, dataForVerify, senderED25519PublicKey);
      (0, import_chai.expect)(isValid).to.be.equal(true, "the signature cannot be verified");
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
