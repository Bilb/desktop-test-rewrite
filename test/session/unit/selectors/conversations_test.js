var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var import_chai = require("chai");
var import_conversation = require("../../../../models/conversation");
var import_conversations2 = require("../../../../state/selectors/conversations");
describe("state/selectors/conversations", () => {
  describe("#getSortedConversationsList", () => {
    it("sorts conversations based on timestamp then by intl-friendly title", () => {
      const i18n = /* @__PURE__ */ __name((key) => key, "i18n");
      const data = {
        id1: {
          id: "id1",
          activeAt: 0,
          name: "No timestamp",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          hasNickname: false,
          isPublic: false,
          subscriberCount: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          expireTimer: 0,
          isPinned: false
        },
        id2: {
          id: "id2",
          activeAt: 20,
          name: "B",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          hasNickname: false,
          isPublic: false,
          subscriberCount: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          expireTimer: 0,
          isPinned: false
        },
        id3: {
          id: "id3",
          activeAt: 20,
          name: "C",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          hasNickname: false,
          isPublic: false,
          subscriberCount: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          expireTimer: 0,
          isPinned: false
        },
        id4: {
          id: "id4",
          activeAt: 20,
          name: "\xC1",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          hasNickname: false,
          isPublic: false,
          subscriberCount: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          expireTimer: 0,
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: false
        },
        id5: {
          id: "id5",
          activeAt: 30,
          name: "First!",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          hasNickname: false,
          isPublic: false,
          subscriberCount: 0,
          expireTimer: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: false
        }
      };
      const comparator = (0, import_conversations2._getConversationComparator)(i18n);
      const conversations = (0, import_conversations2._getSortedConversations)(data, comparator);
      import_chai.assert.strictEqual(conversations[0].name, "First!");
      import_chai.assert.strictEqual(conversations[1].name, "\xC1");
      import_chai.assert.strictEqual(conversations[2].name, "B");
      import_chai.assert.strictEqual(conversations[3].name, "C");
    });
  });
  describe("#getSortedConversationsWithPinned", () => {
    it("sorts conversations based on pin, timestamp then by intl-friendly title", () => {
      const i18n = /* @__PURE__ */ __name((key) => key, "i18n");
      const data = {
        id1: {
          id: "id1",
          activeAt: 0,
          name: "No timestamp",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          subscriberCount: 0,
          expireTimer: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: false,
          hasNickname: false,
          isPublic: false
        },
        id2: {
          id: "id2",
          activeAt: 20,
          name: "B",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          subscriberCount: 0,
          expireTimer: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: false,
          hasNickname: false,
          isPublic: false
        },
        id3: {
          id: "id3",
          activeAt: 20,
          name: "C",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          subscriberCount: 0,
          expireTimer: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: true,
          hasNickname: false,
          isPublic: false
        },
        id4: {
          id: "id4",
          activeAt: 20,
          name: "\xC1",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          subscriberCount: 0,
          expireTimer: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: true,
          hasNickname: false,
          isPublic: false
        },
        id5: {
          id: "id5",
          activeAt: 30,
          name: "First!",
          type: import_conversation.ConversationTypeEnum.PRIVATE,
          isMe: false,
          unreadCount: 1,
          mentionedUs: false,
          isSelected: false,
          isTyping: false,
          isBlocked: false,
          isKickedFromGroup: false,
          left: false,
          subscriberCount: 0,
          expireTimer: 0,
          currentNotificationSetting: "all",
          weAreAdmin: false,
          isGroup: false,
          isPrivate: false,
          avatarPath: "",
          groupAdmins: [],
          lastMessage: void 0,
          members: [],
          profileName: "df",
          isPinned: false,
          hasNickname: false,
          isPublic: false
        }
      };
      const comparator = (0, import_conversations2._getConversationComparator)(i18n);
      const conversations = (0, import_conversations2._getSortedConversations)(data, comparator);
      import_chai.assert.strictEqual(conversations[0].name, "\xC1");
      import_chai.assert.strictEqual(conversations[1].name, "C");
      import_chai.assert.strictEqual(conversations[2].name, "First!");
      import_chai.assert.strictEqual(conversations[3].name, "B");
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
