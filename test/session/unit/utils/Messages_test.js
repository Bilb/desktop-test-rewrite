var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = __toESM(require("chai"));
var sinon = __toESM(require("sinon"));
var import_test_utils = require("../../../test-utils");
var import_utils = require("../../../../session/utils");
var import_types = require("../../../../session/types");
var import_ClosedGroupVisibleMessage = require("../../../../session/messages/outgoing/visibleMessage/ClosedGroupVisibleMessage");
var import_ConfigurationMessage = require("../../../../session/messages/outgoing/controlMessage/ConfigurationMessage");
var import_chai_as_promised = __toESM(require("chai-as-promised"));
var import_ClosedGroupEncryptionPairReplyMessage = require("../../../../session/messages/outgoing/controlMessage/group/ClosedGroupEncryptionPairReplyMessage");
var import_protobuf = require("../../../../protobuf");
var import_ClosedGroupAddedMembersMessage = require("../../../../session/messages/outgoing/controlMessage/group/ClosedGroupAddedMembersMessage");
var import_ClosedGroupEncryptionPairMessage = require("../../../../session/messages/outgoing/controlMessage/group/ClosedGroupEncryptionPairMessage");
var import_ClosedGroupNameChangeMessage = require("../../../../session/messages/outgoing/controlMessage/group/ClosedGroupNameChangeMessage");
var import_ClosedGroupNewMessage = require("../../../../session/messages/outgoing/controlMessage/group/ClosedGroupNewMessage");
var import_ClosedGroupRemovedMembersMessage = require("../../../../session/messages/outgoing/controlMessage/group/ClosedGroupRemovedMembersMessage");
import_chai.default.use(import_chai_as_promised.default);
const { expect } = import_chai.default;
describe("Message Utils", () => {
  const sandbox = sinon.createSandbox();
  afterEach(() => {
    sandbox.restore();
  });
  describe("toRawMessage", () => {
    it("can convert to raw message", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const message = import_test_utils.TestUtils.generateVisibleMessage();
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
      expect(Object.keys(rawMessage)).to.have.length(5);
      expect(rawMessage.identifier).to.exist;
      expect(rawMessage.device).to.exist;
      expect(rawMessage.encryption).to.exist;
      expect(rawMessage.plainTextBuffer).to.exist;
      expect(rawMessage.ttl).to.exist;
      expect(rawMessage.identifier).to.equal(message.identifier);
      expect(rawMessage.device).to.equal(device.key);
      expect(rawMessage.plainTextBuffer).to.deep.equal(message.plainTextBuffer());
      expect(rawMessage.ttl).to.equal(message.ttl());
    });
    it("should generate valid plainTextBuffer", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const message = import_test_utils.TestUtils.generateVisibleMessage();
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
      const rawBuffer = rawMessage.plainTextBuffer;
      const rawBufferJSON = JSON.stringify(rawBuffer);
      const messageBufferJSON = JSON.stringify(message.plainTextBuffer());
      expect(rawBuffer instanceof Uint8Array).to.equal(true, "raw message did not contain a plainTextBuffer");
      expect(rawBufferJSON).to.equal(messageBufferJSON, "plainTextBuffer was not converted correctly");
    });
    it("should maintain pubkey", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const message = import_test_utils.TestUtils.generateVisibleMessage();
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
      const derivedPubKey = import_types.PubKey.from(rawMessage.device);
      expect(derivedPubKey).to.exist;
      expect(derivedPubKey == null ? void 0 : derivedPubKey.isEqual(device)).to.equal(true, "pubkey of message was not converted correctly");
    });
    it("should set encryption to ClosedGroup if a ClosedGroupVisibleMessage is passed in", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const groupId = import_test_utils.TestUtils.generateFakePubKey();
      const chatMessage = import_test_utils.TestUtils.generateVisibleMessage();
      const message = new import_ClosedGroupVisibleMessage.ClosedGroupVisibleMessage({ chatMessage, groupId });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.ClosedGroup);
    });
    it("should set encryption to Fallback on other messages", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const message = import_test_utils.TestUtils.generateVisibleMessage();
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.Fallback);
    });
    it("passing ClosedGroupNewMessage returns Fallback", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const member = import_test_utils.TestUtils.generateFakePubKey().key;
      const msg = new import_ClosedGroupNewMessage.ClosedGroupNewMessage({
        timestamp: Date.now(),
        name: "df",
        members: [member],
        admins: [member],
        groupId: import_test_utils.TestUtils.generateFakePubKey().key,
        keypair: import_test_utils.TestUtils.generateFakeECKeyPair(),
        expireTimer: 0
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.Fallback);
    });
    it("passing ClosedGroupNameChangeMessage returns ClosedGroup", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const msg = new import_ClosedGroupNameChangeMessage.ClosedGroupNameChangeMessage({
        timestamp: Date.now(),
        name: "df",
        groupId: import_test_utils.TestUtils.generateFakePubKey().key
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.ClosedGroup);
    });
    it("passing ClosedGroupAddedMembersMessage returns ClosedGroup", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const msg = new import_ClosedGroupAddedMembersMessage.ClosedGroupAddedMembersMessage({
        timestamp: Date.now(),
        addedMembers: [import_test_utils.TestUtils.generateFakePubKey().key],
        groupId: import_test_utils.TestUtils.generateFakePubKey().key
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.ClosedGroup);
    });
    it("passing ClosedGroupRemovedMembersMessage returns ClosedGroup", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const msg = new import_ClosedGroupRemovedMembersMessage.ClosedGroupRemovedMembersMessage({
        timestamp: Date.now(),
        removedMembers: [import_test_utils.TestUtils.generateFakePubKey().key],
        groupId: import_test_utils.TestUtils.generateFakePubKey().key
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.ClosedGroup);
    });
    it("passing ClosedGroupEncryptionPairMessage returns ClosedGroup", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const fakeWrappers = new Array();
      fakeWrappers.push(new import_protobuf.SignalService.DataMessage.ClosedGroupControlMessage.KeyPairWrapper({
        publicKey: new Uint8Array(8),
        encryptedKeyPair: new Uint8Array(8)
      }));
      const msg = new import_ClosedGroupEncryptionPairMessage.ClosedGroupEncryptionPairMessage({
        timestamp: Date.now(),
        groupId: import_test_utils.TestUtils.generateFakePubKey().key,
        encryptedKeyPairs: fakeWrappers
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.ClosedGroup);
    });
    it("passing ClosedGroupEncryptionKeyPairReply returns Fallback", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const fakeWrappers = new Array();
      fakeWrappers.push(new import_protobuf.SignalService.DataMessage.ClosedGroupControlMessage.KeyPairWrapper({
        publicKey: new Uint8Array(8),
        encryptedKeyPair: new Uint8Array(8)
      }));
      const msg = new import_ClosedGroupEncryptionPairReplyMessage.ClosedGroupEncryptionPairReplyMessage({
        timestamp: Date.now(),
        groupId: import_test_utils.TestUtils.generateFakePubKey().key,
        encryptedKeyPairs: fakeWrappers
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.Fallback);
    });
    it("passing a ConfigurationMessage returns Fallback", async () => {
      const device = import_test_utils.TestUtils.generateFakePubKey();
      const msg = new import_ConfigurationMessage.ConfigurationMessage({
        timestamp: Date.now(),
        activeOpenGroups: [],
        activeClosedGroups: [],
        displayName: "displayName",
        contacts: []
      });
      const rawMessage = await import_utils.MessageUtils.toRawMessage(device, msg);
      expect(rawMessage.encryption).to.equal(import_types.EncryptionType.Fallback);
    });
  });
  describe("getCurrentConfigurationMessage", () => {
    const ourNumber = import_test_utils.TestUtils.generateFakePubKey().key;
    beforeEach(() => {
      sandbox.stub(import_utils.UserUtils, "getOurPubKeyStrFromCache").resolves(ourNumber);
      sandbox.stub(import_utils.UserUtils, "getOurPubKeyFromCache").resolves(import_types.PubKey.cast(ourNumber));
    });
    beforeEach(() => {
      sandbox.restore();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
