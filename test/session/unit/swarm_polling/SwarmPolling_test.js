var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = __toESM(require("chai"));
var sinon = __toESM(require("sinon"));
var import_mocha = require("mocha");
var import_chai_as_promised = __toESM(require("chai-as-promised"));
var import_test_utils = require("../../../test-utils");
var import_utils = require("../../../../session/utils");
var import_conversations = require("../../../../session/conversations");
var Data = __toESM(require("../../../../../ts/data/data"));
var import_snode_api = require("../../../../session/apis/snode_api");
var import_constants = require("../../../../session/constants");
var import_conversation = require("../../../../models/conversation");
var import_types = require("../../../../session/types");
var import_utils2 = require("../../../test-utils/utils");
import_chai.default.use(import_chai_as_promised.default);
import_chai.default.should();
const { expect } = import_chai.default;
(0, import_mocha.describe)("SwarmPolling", () => {
  const sandbox = sinon.createSandbox();
  const ourPubkey = import_test_utils.TestUtils.generateFakePubKey();
  const ourNumber = ourPubkey.key;
  let TEST_pollOnceForKeySpy;
  let swarmPolling;
  let clock;
  beforeEach(async () => {
    sandbox.stub(import_utils.UserUtils, "getOurPubKeyStrFromCache").returns(ourNumber);
    sandbox.stub(Data, "getAllConversations").resolves(new import_conversation.ConversationCollection());
    sandbox.stub(Data, "getItemById").resolves();
    sandbox.stub(Data, "saveConversation").resolves();
    sandbox.stub(Data, "getSwarmNodesForPubkey").resolves();
    sandbox.stub(Data, "getLastHashBySnode").resolves();
    sandbox.stub(import_snode_api.SnodePool, "getSwarmFor").resolves((0, import_utils2.generateFakeSnodes)(5));
    sandbox.stub(import_snode_api.SNodeAPI, "retrieveNextMessages").resolves([]);
    import_test_utils.TestUtils.stubWindow("inboxStore", void 0);
    import_test_utils.TestUtils.stubWindow("getGlobalOnlineStatus", () => true);
    import_test_utils.TestUtils.stubWindowLog();
    const convoController = (0, import_conversations.getConversationController)();
    await convoController.load();
    (0, import_conversations.getConversationController)().getOrCreate(ourPubkey.key, import_conversation.ConversationTypeEnum.PRIVATE);
    swarmPolling = (0, import_snode_api.getSwarmPollingInstance)();
    swarmPolling.TEST_reset();
    TEST_pollOnceForKeySpy = sandbox.spy(swarmPolling, "TEST_pollOnceForKey");
    clock = sinon.useFakeTimers(Date.now());
  });
  afterEach(() => {
    import_test_utils.TestUtils.restoreStubs();
    sandbox.restore();
    (0, import_conversations.getConversationController)().reset();
    clock.restore();
  });
  (0, import_mocha.describe)("getPollingTimeout", () => {
    it("returns INACTIVE for non existing convo", () => {
      const fakeConvo = import_test_utils.TestUtils.generateFakePubKey();
      expect(swarmPolling.TEST_getPollingTimeout(fakeConvo)).to.eq(import_constants.SWARM_POLLING_TIMEOUT.INACTIVE);
    });
    it("returns ACTIVE for convo with less than two days old activeAt", () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", Date.now() - 2 * 23 * 3600 * 1e3);
      expect(swarmPolling.TEST_getPollingTimeout(import_types.PubKey.cast(convo.id))).to.eq(import_constants.SWARM_POLLING_TIMEOUT.ACTIVE);
    });
    it("returns INACTIVE for convo with undefined activeAt", () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", void 0);
      expect(swarmPolling.TEST_getPollingTimeout(import_types.PubKey.cast(convo.id))).to.eq(import_constants.SWARM_POLLING_TIMEOUT.INACTIVE);
    });
    it("returns MEDIUM_ACTIVE for convo with activeAt of more than 2 days but less than a week old", () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", Date.now() - 1e3 * 3600 * 25 * 2);
      expect(swarmPolling.TEST_getPollingTimeout(import_types.PubKey.cast(convo.id))).to.eq(import_constants.SWARM_POLLING_TIMEOUT.MEDIUM_ACTIVE);
      convo.set("active_at", Date.now() - 1e3 * 3600 * 24 * 7 + 3600);
      expect(swarmPolling.TEST_getPollingTimeout(import_types.PubKey.cast(convo.id))).to.eq(import_constants.SWARM_POLLING_TIMEOUT.MEDIUM_ACTIVE);
    });
    it("returns INACTIVE for convo with  activeAt of more than a week", () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", Date.now() - 1e3 * 3600 * 24 * 8);
      expect(swarmPolling.TEST_getPollingTimeout(import_types.PubKey.cast(convo.id))).to.eq(import_constants.SWARM_POLLING_TIMEOUT.INACTIVE);
    });
  });
  (0, import_mocha.describe)("pollForAllKeys", () => {
    it("does run for our pubkey even if activeAt is really old ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(ourNumber, import_conversation.ConversationTypeEnum.PRIVATE);
      convo.set("active_at", Date.now() - 1e3 * 3600 * 25);
      await swarmPolling.start(true);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(1);
      expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
    });
    it("does run for our pubkey even if activeAt is recent ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(ourNumber, import_conversation.ConversationTypeEnum.PRIVATE);
      convo.set("active_at", Date.now());
      await swarmPolling.start(true);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(1);
      expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
    });
    it("does run for group pubkey on start no matter the recent timestamp  ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", Date.now());
      const groupConvoPubkey = import_types.PubKey.cast(convo.id);
      swarmPolling.addGroupId(groupConvoPubkey);
      await swarmPolling.start(true);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(2);
      expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
      expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
    });
    it("does run for group pubkey on start no matter the old timestamp ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", 1);
      const groupConvoPubkey = import_types.PubKey.cast(convo.id);
      swarmPolling.addGroupId(groupConvoPubkey);
      await swarmPolling.start(true);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(2);
      expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
      expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
    });
    it("does run for group pubkey on start but not another time if activeAt is old ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", 1);
      const groupConvoPubkey = import_types.PubKey.cast(convo.id);
      swarmPolling.addGroupId(groupConvoPubkey);
      await swarmPolling.start(true);
      await swarmPolling.TEST_pollForAllKeys();
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(3);
      expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
      expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
      expect(TEST_pollOnceForKeySpy.thirdCall.args).to.deep.eq([ourPubkey, false]);
    });
    it("does run twice if activeAt less than one hour ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      convo.set("active_at", Date.now());
      const groupConvoPubkey = import_types.PubKey.cast(convo.id);
      swarmPolling.addGroupId(groupConvoPubkey);
      await swarmPolling.start(true);
      clock.tick(6e3);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(4);
      expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
      expect(TEST_pollOnceForKeySpy.thirdCall.args).to.deep.eq([ourPubkey, false]);
      expect(TEST_pollOnceForKeySpy.lastCall.args).to.deep.eq([groupConvoPubkey, true]);
    });
    it("does run twice if activeAt is inactive and we tick longer than 2 minutes", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      TEST_pollOnceForKeySpy.resetHistory();
      convo.set("active_at", Date.now());
      const groupConvoPubkey = import_types.PubKey.cast(convo.id);
      swarmPolling.addGroupId(groupConvoPubkey);
      await swarmPolling.start(true);
      const timeToTick = 3 * 60 * 1e3;
      swarmPolling.TEST_forcePolledTimestamp(groupConvoPubkey, Date.now() - timeToTick);
      convo.set("active_at", Date.now() - 7 * 25 * 3600 * 1e3);
      clock.tick(timeToTick);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(4);
      expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
      expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
      expect(TEST_pollOnceForKeySpy.thirdCall.args).to.deep.eq([ourPubkey, false]);
      expect(TEST_pollOnceForKeySpy.getCalls()[3].args).to.deep.eq([groupConvoPubkey, true]);
    });
    it("does run once only if group is inactive and we tick less than 2 minutes ", async () => {
      const convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
      TEST_pollOnceForKeySpy.resetHistory();
      convo.set("active_at", Date.now());
      const groupConvoPubkey = import_types.PubKey.cast(convo.id);
      swarmPolling.addGroupId(groupConvoPubkey);
      await swarmPolling.start(true);
      convo.set("active_at", Date.now() - 7 * 24 * 3600 * 1e3 - 3600 * 1e3);
      clock.tick(1 * 60 * 1e3);
      expect(TEST_pollOnceForKeySpy.callCount).to.eq(3);
      expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
      expect(TEST_pollOnceForKeySpy.thirdCall.args).to.deep.eq([ourPubkey, false]);
    });
    (0, import_mocha.describe)("multiple runs", () => {
      let convo;
      let groupConvoPubkey;
      beforeEach(async () => {
        convo = (0, import_conversations.getConversationController)().getOrCreate(import_test_utils.TestUtils.generateFakePubKeyStr(), import_conversation.ConversationTypeEnum.GROUP);
        convo.set("active_at", Date.now());
        groupConvoPubkey = import_types.PubKey.cast(convo.id);
        swarmPolling.addGroupId(groupConvoPubkey);
        await swarmPolling.start(true);
      });
      it("does run twice if activeAt is less than 2 days", async () => {
        TEST_pollOnceForKeySpy.resetHistory();
        convo.set("active_at", Date.now() - 2 * 24 * 3600 * 1e3 - 3600 * 1e3);
        const timeToTick = 6 * 1e3;
        swarmPolling.TEST_forcePolledTimestamp(convo.id, timeToTick);
        clock.tick(timeToTick);
        await swarmPolling.TEST_pollForAllKeys();
        expect(TEST_pollOnceForKeySpy.callCount).to.eq(4);
        expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
        expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
        expect(TEST_pollOnceForKeySpy.thirdCall.args).to.deep.eq([ourPubkey, false]);
        expect(TEST_pollOnceForKeySpy.getCalls()[3].args).to.deep.eq([groupConvoPubkey, true]);
      });
      it("does run twice if activeAt is more than 2 days old and we tick more than one minute ", async () => {
        TEST_pollOnceForKeySpy.resetHistory();
        convo.set("active_at", Date.now() - 2 * 25 * 3600 * 1e3);
        const timeToTick = 65 * 1e3;
        swarmPolling.TEST_forcePolledTimestamp(convo.id, timeToTick);
        clock.tick(timeToTick);
        await swarmPolling.TEST_pollForAllKeys();
        expect(TEST_pollOnceForKeySpy.callCount).to.eq(4);
        expect(TEST_pollOnceForKeySpy.firstCall.args).to.deep.eq([ourPubkey, false]);
        expect(TEST_pollOnceForKeySpy.secondCall.args).to.deep.eq([groupConvoPubkey, true]);
        expect(TEST_pollOnceForKeySpy.thirdCall.args).to.deep.eq([ourPubkey, false]);
        expect(TEST_pollOnceForKeySpy.getCalls()[3].args).to.deep.eq([groupConvoPubkey, true]);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
