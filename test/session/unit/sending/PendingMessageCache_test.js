var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = require("chai");
var sinon = __toESM(require("sinon"));
var _ = __toESM(require("lodash"));
var import_utils = require("../../../../session/utils");
var import_test_utils = require("../../../../test/test-utils");
var import_PendingMessageCache = require("../../../../session/sending/PendingMessageCache");
describe("PendingMessageCache", () => {
  const sandbox = sinon.createSandbox();
  let data;
  let pendingMessageCacheStub;
  beforeEach(() => {
    const storageID = "pendingMessages";
    data = {
      id: storageID,
      value: "[]"
    };
    import_test_utils.TestUtils.stubData("getItemById").withArgs("pendingMessages").callsFake(async () => {
      return data;
    });
    import_test_utils.TestUtils.stubData("createOrUpdateItem").callsFake((item) => {
      if (item.id === storageID) {
        data = item;
      }
    });
    pendingMessageCacheStub = new import_PendingMessageCache.PendingMessageCache();
  });
  afterEach(() => {
    sandbox.restore();
    import_test_utils.TestUtils.restoreStubs();
  });
  it("can initialize cache", async () => {
    const cache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(cache).to.be.instanceOf(Array);
    (0, import_chai.expect)(cache).to.have.length(0);
  });
  it("can add to cache", async () => {
    const device = import_test_utils.TestUtils.generateFakePubKey();
    const message = import_test_utils.TestUtils.generateVisibleMessage();
    const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
    await pendingMessageCacheStub.add(device, message);
    const finalCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(finalCache).to.have.length(1);
    const addedMessage = finalCache[0];
    (0, import_chai.expect)(addedMessage.device).to.deep.equal(rawMessage.device);
  });
  it("can add multiple messages belonging to the same user", async () => {
    const device = import_test_utils.TestUtils.generateFakePubKey();
    await pendingMessageCacheStub.add(device, import_test_utils.TestUtils.generateVisibleMessage());
    await import_test_utils.TestUtils.timeout(5);
    await pendingMessageCacheStub.add(device, import_test_utils.TestUtils.generateVisibleMessage());
    await import_test_utils.TestUtils.timeout(5);
    await pendingMessageCacheStub.add(device, import_test_utils.TestUtils.generateVisibleMessage());
    const finalCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(finalCache).to.have.length(3);
  });
  it("can remove from cache", async () => {
    const device = import_test_utils.TestUtils.generateFakePubKey();
    const message = import_test_utils.TestUtils.generateVisibleMessage();
    const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
    await pendingMessageCacheStub.add(device, message);
    const initialCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(initialCache).to.have.length(1);
    await pendingMessageCacheStub.remove(rawMessage);
    const finalCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(finalCache).to.have.length(0);
  });
  it("should only remove messages with different identifier and device", async () => {
    const device = import_test_utils.TestUtils.generateFakePubKey();
    const message = import_test_utils.TestUtils.generateVisibleMessage();
    const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
    await pendingMessageCacheStub.add(device, message);
    await import_test_utils.TestUtils.timeout(5);
    const one = await pendingMessageCacheStub.add(device, import_test_utils.TestUtils.generateVisibleMessage());
    const two = await pendingMessageCacheStub.add(import_test_utils.TestUtils.generateFakePubKey(), message);
    const initialCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(initialCache).to.have.length(3);
    await pendingMessageCacheStub.remove(rawMessage);
    const finalCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(finalCache).to.have.length(2);
    (0, import_chai.expect)(finalCache).to.have.deep.members([one, two]);
  });
  it("can get devices", async () => {
    const cacheItems = [
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      }
    ];
    for (const item of cacheItems) {
      await pendingMessageCacheStub.add(item.device, item.message);
    }
    const cache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(cache).to.have.length(cacheItems.length);
    const devicesKeys = cacheItems.map((item) => item.device.key);
    const pulledDevices = await pendingMessageCacheStub.getDevices();
    const pulledDevicesKeys = pulledDevices.map((d) => d.key);
    (0, import_chai.expect)(pulledDevicesKeys).to.have.members(devicesKeys);
  });
  it("can get pending for device", async () => {
    const cacheItems = [
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      }
    ];
    for (const item of cacheItems) {
      await pendingMessageCacheStub.add(item.device, item.message);
    }
    const initialCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(initialCache).to.have.length(cacheItems.length);
    for (const item of cacheItems) {
      const pendingForDevice = await pendingMessageCacheStub.getForDevice(item.device);
      (0, import_chai.expect)(pendingForDevice).to.have.length(1);
      (0, import_chai.expect)(pendingForDevice[0].device).to.equal(item.device.key);
    }
  });
  it("can find nothing when empty", async () => {
    const device = import_test_utils.TestUtils.generateFakePubKey();
    const message = import_test_utils.TestUtils.generateVisibleMessage();
    const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
    const foundMessage = pendingMessageCacheStub.find(rawMessage);
    (0, import_chai.expect)(foundMessage, "a message was found in empty cache").to.be.undefined;
  });
  it("can find message in cache", async () => {
    const device = import_test_utils.TestUtils.generateFakePubKey();
    const message = import_test_utils.TestUtils.generateVisibleMessage();
    const rawMessage = await import_utils.MessageUtils.toRawMessage(device, message);
    await pendingMessageCacheStub.add(device, message);
    const finalCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(finalCache).to.have.length(1);
    const foundMessage = pendingMessageCacheStub.find(rawMessage);
    (0, import_chai.expect)(foundMessage, "message not found in cache").to.be.ok;
    foundMessage && (0, import_chai.expect)(foundMessage.device).to.equal(device.key);
  });
  it("can clear cache", async () => {
    const cacheItems = [
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      }
    ];
    for (const item of cacheItems) {
      await pendingMessageCacheStub.add(item.device, item.message);
    }
    const initialCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(initialCache).to.have.length(cacheItems.length);
    await pendingMessageCacheStub.clear();
    const finalCache = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(finalCache).to.have.length(0);
  });
  it("can restore from db", async () => {
    const cacheItems = [
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      },
      {
        device: import_test_utils.TestUtils.generateFakePubKey(),
        message: import_test_utils.TestUtils.generateVisibleMessage()
      }
    ];
    for (const item of cacheItems) {
      await pendingMessageCacheStub.add(item.device, item.message);
    }
    const addedMessages = await pendingMessageCacheStub.getAllPending();
    (0, import_chai.expect)(addedMessages).to.have.length(cacheItems.length);
    const freshCache = new import_PendingMessageCache.PendingMessageCache();
    const rebuiltMessages = await freshCache.getAllPending();
    for (const [index, message] of rebuiltMessages.entries()) {
      const addedMessage = addedMessages[index];
      const buffersCompare = Buffer.compare(message.plainTextBuffer, addedMessage.plainTextBuffer) === 0;
      (0, import_chai.expect)(buffersCompare).to.equal(true, "buffers were not loaded properly from database");
      const trimmedAdded = _.omit(addedMessage, ["plainTextBuffer"]);
      const trimmedRebuilt = _.omit(message, ["plainTextBuffer"]);
      (0, import_chai.expect)(_.isEqual(trimmedAdded, trimmedRebuilt)).to.equal(true, "cached messages were not rebuilt properly");
    }
  });
});
//# sourceMappingURL=data:application/json;base64,
